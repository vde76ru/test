<?php
namespace App\Services;

use App\Core\Database;
use App\Core\Logger;
use App\Core\Cache;
use OpenSearch\ClientBuilder;

class SearchService
{
    private static ?\OpenSearch\Client $client = null;
    private static array $keyboardLayout = [
        // EN -> RU
        'q' => '–π', 'w' => '—Ü', 'e' => '—É', 'r' => '–∫', 't' => '–µ', 'y' => '–Ω', 'u' => '–≥', 'i' => '—à', 'o' => '—â', 'p' => '–∑',
        'a' => '—Ñ', 's' => '—ã', 'd' => '–≤', 'f' => '–∞', 'g' => '–ø', 'h' => '—Ä', 'j' => '–æ', 'k' => '–ª', 'l' => '–¥',
        'z' => '—è', 'x' => '—á', 'c' => '—Å', 'v' => '–º', 'b' => '–∏', 'n' => '—Ç', 'm' => '—å',
        // RU -> EN
        '–π' => 'q', '—Ü' => 'w', '—É' => 'e', '–∫' => 'r', '–µ' => 't', '–Ω' => 'y', '–≥' => 'u', '—à' => 'i', '—â' => 'o', '–∑' => 'p',
        '—Ñ' => 'a', '—ã' => 's', '–≤' => 'd', '–∞' => 'f', '–ø' => 'g', '—Ä' => 'h', '–æ' => 'j', '–ª' => 'k', '–¥' => 'l',
        '—è' => 'z', '—á' => 'x', '—Å' => 'c', '–º' => 'v', '–∏' => 'b', '—Ç' => 'n', '—å' => 'm'
    ];

    /**
     * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞
     */
    public static function search(array $params): array
    {
        $requestId = uniqid('search_', true);
        $startTime = microtime(true);

        Logger::info("üîç [$requestId] Search started", ['params' => $params]);

        try {
            $params = self::validateParams($params);

            // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º MySQL –¥–ª—è –ª–∏—Å—Ç–∏–Ω–≥–∞
            if (empty($params['q']) || strlen(trim($params['q'])) === 0) {
                Logger::info("üìã [$requestId] Empty query, using MySQL for listing");
                $result = self::searchViaMySQL($params);
                return [
                    'success' => true,
                    'data' => $result
                ];
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenSearch
            if (self::isOpenSearchAvailable()) {
                Logger::debug("‚úÖ [$requestId] Using OpenSearch");
                try {
                    $result = self::performOpenSearch($params, $requestId);
                    $duration = round((microtime(true) - $startTime) * 1000, 2);
                    Logger::info("‚úÖ [$requestId] OpenSearch completed in {$duration}ms");
                    return [
                        'success' => true,
                        'data' => $result
                    ];
                } catch (\Exception $e) {
                    Logger::warning("‚ö†Ô∏è [$requestId] OpenSearch failed, falling back to MySQL", [
                        'error' => $e->getMessage()
                    ]);
                }
            }

            // MySQL –ø–æ–∏—Å–∫ –∫–∞–∫ fallback
            $result = self::searchViaMySQL($params);
            return [
                'success' => true,
                'data' => $result
            ];

        } catch (\Exception $e) {
            Logger::error("‚ùå [$requestId] Search failed", [
                'error' => $e->getMessage()
            ]);

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return [
                'success' => false,
                'error' => 'Search service temporarily unavailable',
                'error_code' => 'SERVICE_UNAVAILABLE',
                'data' => [
                    'products' => [],
                    'total' => 0,
                    'page' => $params['page'] ?? 1,
                    'limit' => $params['limit'] ?? 20
                ]
            ];
        }
    }

    /**
     * –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ MySQL —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∫–∏
     */
    private static function searchViaMySQL(array $params): array
    {
        $query = $params['q'] ?? '';
        $page = $params['page'];
        $limit = $params['limit'];
        $offset = ($page - 1) * $limit;

        try {
            $pdo = Database::getConnection();

            if (empty($query)) {
                // –ü—Ä–æ—Å—Ç–æ–π –ª–∏—Å—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤
                $sql = "SELECT SQL_CALC_FOUND_ROWS 
                        p.product_id, p.external_id, p.sku, p.name, p.description,
                        p.brand_id, p.series_id, p.unit, p.min_sale, p.weight, p.dimensions,
                        b.name as brand_name, s.name as series_name,
                        1 as relevance_score
                        FROM products p
                        LEFT JOIN brands b ON p.brand_id = b.brand_id
                        LEFT JOIN series s ON p.series_id = s.series_id
                        ORDER BY p.product_id DESC
                        LIMIT :limit OFFSET :offset";

                $stmt = $pdo->prepare($sql);
                $stmt->bindValue(':limit', $limit, \PDO::PARAM_INT);
                $stmt->bindValue(':offset', $offset, \PDO::PARAM_INT);
                $stmt->execute();

            } else {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—Ä–æ—Å–∞
                $searchVariants = self::generateSearchVariants($query);
                
                // –°—Ç—Ä–æ–∏–º SQL —Å —É—á–µ—Ç–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                $whereParts = [];
                $params = [];
                
                foreach ($searchVariants as $idx => $variant) {
                    $whereParts[] = "(
                        p.external_id = :exact{$idx} OR
                        p.sku = :exact{$idx} OR
                        p.external_id LIKE :prefix{$idx} OR
                        p.sku LIKE :prefix{$idx} OR
                        p.name LIKE :search{$idx} OR
                        p.description LIKE :search{$idx} OR
                        b.name LIKE :search{$idx}
                    )";
                    
                    $params["exact{$idx}"] = $variant;
                    $params["prefix{$idx}"] = $variant . '%';
                    $params["search{$idx}"] = '%' . $variant . '%';
                }

                $sql = "SELECT SQL_CALC_FOUND_ROWS 
                        p.product_id, p.external_id, p.sku, p.name, p.description,
                        p.brand_id, p.series_id, p.unit, p.min_sale, p.weight, p.dimensions,
                        b.name as brand_name, s.name as series_name,
                        CASE 
                            WHEN p.external_id = :score_exact THEN 1000
                            WHEN p.sku = :score_exact THEN 900
                            WHEN p.external_id LIKE :score_prefix THEN 100
                            WHEN p.sku LIKE :score_prefix THEN 90
                            WHEN p.name = :score_exact THEN 80
                            WHEN p.name LIKE :score_prefix THEN 50
                            WHEN p.name LIKE :score_search THEN 30
                            ELSE 1
                        END as relevance_score
                        FROM products p
                        LEFT JOIN brands b ON p.brand_id = b.brand_id
                        LEFT JOIN series s ON p.series_id = s.series_id
                        WHERE " . implode(' OR ', $whereParts) . "
                        ORDER BY relevance_score DESC, p.name ASC
                        LIMIT :limit OFFSET :offset";

                $stmt = $pdo->prepare($sql);
                
                // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                foreach ($params as $key => $value) {
                    $stmt->bindValue(':' . $key, $value, \PDO::PARAM_STR);
                }
                
                // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∫–æ—Ä–∏–Ω–≥–∞
                $stmt->bindValue(':score_exact', $query, \PDO::PARAM_STR);
                $stmt->bindValue(':score_prefix', $query . '%', \PDO::PARAM_STR);
                $stmt->bindValue(':score_search', '%' . $query . '%', \PDO::PARAM_STR);
                
                // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
                $stmt->bindValue(':limit', $limit, \PDO::PARAM_INT);
                $stmt->bindValue(':offset', $offset, \PDO::PARAM_INT);
                
                $stmt->execute();
            }

            $products = $stmt->fetchAll(\PDO::FETCH_ASSOC);
            $total = $pdo->query("SELECT FOUND_ROWS()")->fetchColumn();

            return [
                'products' => $products,
                'total' => (int)$total,
                'page' => $page,
                'limit' => $limit,
                'source' => 'mysql',
                'search_variants' => $searchVariants ?? []
            ];

        } catch (\Exception $e) {
            Logger::error('MySQL search failed', ['error' => $e->getMessage()]);
            throw $e;
        }
    }

    /**
     * –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ OpenSearch
     */
    private static function performOpenSearch(array $params, string $requestId): array
    {
        $client = self::getClient();
        
        $body = [
            'size' => $params['limit'],
            'from' => ($params['page'] - 1) * $params['limit'],
            'track_total_hits' => true
        ];

        if (!empty($params['q'])) {
            $query = trim($params['q']);
            $searchVariants = self::generateSearchVariants($query);
            
            $shouldClauses = [];
            
            foreach ($searchVariants as $variant) {
                // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞
                $shouldClauses[] = [
                    'term' => ['external_id.keyword' => ['value' => $variant, 'boost' => 1000]]
                ];
                $shouldClauses[] = [
                    'term' => ['sku.keyword' => ['value' => $variant, 'boost' => 900]]
                ];
                
                // –ü—Ä–µ—Ñ–∏–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
                $shouldClauses[] = [
                    'prefix' => ['external_id' => ['value' => $variant, 'boost' => 100]]
                ];
                
                // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                $shouldClauses[] = [
                    'match_phrase' => [
                        'name' => ['query' => $variant, 'boost' => 200]
                    ]
                ];
                $shouldClauses[] = [
                    'match' => [
                        'name' => ['query' => $variant, 'boost' => 50]
                    ]
                ];
                
                // –ü–æ–∏—Å–∫ –ø–æ –±—Ä–µ–Ω–¥—É
                $shouldClauses[] = [
                    'match' => [
                        'brand_name' => ['query' => $variant, 'boost' => 80]
                    ]
                ];
                
                // –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
                $shouldClauses[] = [
                    'match' => [
                        'name.autocomplete' => ['query' => $variant, 'boost' => 30]
                    ]
                ];
                
                // –û–±—â–∏–π –ø–æ–∏—Å–∫
                $shouldClauses[] = [
                    'match' => [
                        'search_text' => ['query' => $variant, 'boost' => 20]
                    ]
                ];
            }

            $body['query'] = [
                'bool' => [
                    'should' => $shouldClauses,
                    'minimum_should_match' => 1
                ]
            ];

            // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            $body['highlight'] = [
                'fields' => [
                    'name' => ['number_of_fragments' => 0],
                    'external_id' => ['number_of_fragments' => 0],
                    'brand_name' => ['number_of_fragments' => 0]
                ],
                'pre_tags' => ['<mark>'],
                'post_tags' => ['</mark>']
            ];

        } else {
            $body['query'] = ['match_all' => new \stdClass()];
        }

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        switch ($params['sort']) {
            case 'name':
                $body['sort'] = [['name.keyword' => 'asc']];
                break;
            case 'external_id':
                $body['sort'] = [['external_id.keyword' => 'asc']];
                break;
            case 'popularity':
                $body['sort'] = [['popularity_score' => 'desc']];
                break;
            default:
                if (!empty($params['q'])) {
                    $body['sort'] = [
                        ['_score' => 'desc'],
                        ['has_stock' => 'desc'],
                        ['popularity_score' => 'desc']
                    ];
                } else {
                    $body['sort'] = [['product_id' => 'desc']];
                }
        }

        Logger::debug("[$requestId] OpenSearch query", [
            'body' => json_encode($body, JSON_PRETTY_PRINT)
        ]);

        try {
            $response = $client->search([
                'index' => 'products_current',
                'body' => $body
            ]);

            $products = [];
            foreach ($response['hits']['hits'] ?? [] as $hit) {
                $product = $hit['_source'];
                $product['_score'] = $hit['_score'] ?? 0;
                
                if (isset($hit['highlight'])) {
                    $product['_highlight'] = $hit['highlight'];
                }
                
                $products[] = $product;
            }

            $total = $response['hits']['total']['value'] ?? 0;

            return [
                'products' => $products,
                'total' => $total,
                'page' => $params['page'],
                'limit' => $params['limit'],
                'source' => 'opensearch',
                'max_score' => $response['hits']['max_score'] ?? 0,
                'search_variants' => $searchVariants ?? []
            ];

        } catch (\Exception $e) {
            Logger::error("[$requestId] OpenSearch failed", ['error' => $e->getMessage()]);
            throw $e;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
     */
    private static function generateSearchVariants(string $query): array
    {
        $variants = [$query];

        // 1. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        $converted = self::convertKeyboardLayout($query);
        if ($converted !== $query) {
            $variants[] = $converted;
        }

        // 2. –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è RU->EN
        $transliterated = self::transliterate($query);
        if ($transliterated !== $query && !in_array($transliterated, $variants)) {
            $variants[] = $transliterated;
        }

        // 3. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤)
        $normalized = preg_replace('/[^a-zA-Z0-9–∞-—è–ê-–Ø]/u', '', $query);
        if ($normalized !== $query && !in_array($normalized, $variants)) {
            $variants[] = $normalized;
        }

        return array_unique($variants);
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    private static function convertKeyboardLayout(string $text): string
    {
        $result = '';
        $chars = preg_split('//u', $text, -1, PREG_SPLIT_NO_EMPTY);
        
        foreach ($chars as $char) {
            $lower = mb_strtolower($char);
            if (isset(self::$keyboardLayout[$lower])) {
                $converted = self::$keyboardLayout[$lower];
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä
                if ($char !== $lower) {
                    $converted = mb_strtoupper($converted);
                }
                $result .= $converted;
            } else {
                $result .= $char;
            }
        }
        
        return $result;
    }

    /**
     * –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è RU -> EN
     */
    private static function transliterate(string $text): string
    {
        $rules = [
            '–∞' => 'a', '–±' => 'b', '–≤' => 'v', '–≥' => 'g', '–¥' => 'd',
            '–µ' => 'e', '—ë' => 'e', '–∂' => 'zh', '–∑' => 'z', '–∏' => 'i',
            '–π' => 'y', '–∫' => 'k', '–ª' => 'l', '–º' => 'm', '–Ω' => 'n',
            '–æ' => 'o', '–ø' => 'p', '—Ä' => 'r', '—Å' => 's', '—Ç' => 't',
            '—É' => 'u', '—Ñ' => 'f', '—Ö' => 'h', '—Ü' => 'ts', '—á' => 'ch',
            '—à' => 'sh', '—â' => 'sch', '—ä' => '', '—ã' => 'y', '—å' => '',
            '—ç' => 'e', '—é' => 'yu', '—è' => 'ya'
        ];

        $text = mb_strtolower($text);
        return strtr($text, $rules);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenSearch
     */
    private static function isOpenSearchAvailable(): bool
    {
        static $isAvailable = null;
        static $lastCheck = 0;

        // –ö–µ—à –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥
        if ($isAvailable !== null && (time() - $lastCheck) < 60) {
            return $isAvailable;
        }

        try {
            $client = self::getClient();
            $response = $client->ping();
            
            if ($response) {
                $health = $client->cluster()->health(['timeout' => '2s']);
                $isAvailable = in_array($health['status'] ?? 'red', ['green', 'yellow']);
            } else {
                $isAvailable = false;
            }
            
            $lastCheck = time();
            
        } catch (\Exception $e) {
            $isAvailable = false;
            $lastCheck = time();
            Logger::error("OpenSearch check failed", ['error' => $e->getMessage()]);
        }

        return $isAvailable;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ OpenSearch
     */
    private static function getClient(): \OpenSearch\Client
    {
        if (self::$client === null) {
            self::$client = ClientBuilder::create()
                ->setHosts(['localhost:9200'])
                ->setRetries(2)
                ->setConnectionParams([
                    'timeout' => 5,
                    'connect_timeout' => 2
                ])
                ->build();
        }
        return self::$client;
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    private static function validateParams(array $params): array
    {
        return [
            'q' => trim($params['q'] ?? ''),
            'page' => max(1, (int)($params['page'] ?? 1)),
            'limit' => min(100, max(1, (int)($params['limit'] ?? 20))),
            'city_id' => (int)($params['city_id'] ?? 1),
            'sort' => $params['sort'] ?? 'relevance',
            'user_id' => $params['user_id'] ?? null
        ];
    }

    /**
     * –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
     */
    public static function autocomplete(string $query, int $limit = 10): array
    {
        if (strlen($query) < 2) {
            return [];
        }

        try {
            $client = self::getClient();
            
            $body = [
                'suggest' => [
                    'product-suggest' => [
                        'prefix' => $query,
                        'completion' => [
                            'field' => 'suggest',
                            'size' => $limit,
                            'skip_duplicates' => true
                        ]
                    ]
                ]
            ];

            $response = $client->search([
                'index' => 'products_current',
                'body' => $body
            ]);

            $suggestions = [];
            
            if (isset($response['suggest']['product-suggest'][0]['options'])) {
                foreach ($response['suggest']['product-suggest'][0]['options'] as $option) {
                    $suggestions[] = [
                        'text' => $option['text'],
                        'score' => $option['_score']
                    ];
                }
            }

            return $suggestions;

        } catch (\Exception $e) {
            Logger::warning('Autocomplete failed', ['error' => $e->getMessage()]);
            return [];
        }
    }
}